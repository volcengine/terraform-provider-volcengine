package waf_domain

import (
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/helper/validation"
	ve "github.com/volcengine/terraform-provider-volcengine/common"
)

func DataSourceVolcengineWafDomains() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceVolcengineWafDomainsRead,
		Schema: map[string]*schema.Schema{
			"name_regex": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: validation.StringIsValidRegExp,
				Description:  "A Name Regex of Resource.",
			},
			"output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "File name where to save data source results.",
			},
			"total_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "The total count of query.",
			},
			"domain": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "The domain name of the protected website that needs to be queried.",
			},
			"accurate_query": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: "Matching mode.",
			},
			"data": {
				Description: "The collection of query.",
				Type:        schema.TypeList,
				Computed:    true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "domain region that need to be protected by WAF.",
						},
						"domain": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "domain names that need to be protected by WAF.",
						},
						"advanced_defense_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "High-defense instance IP.",
						},
						"cname": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The CNAME value generated by the WAF instance.",
						},
						"certificate_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "When the protocol type is HTTPS, the bound certificate ID needs to be entered.",
						},
						"certificate_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The name of the certificate.",
						},
						"lb_algorithm": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The types of load balancing algorithms.",
						},
						"access_mode": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Access mode.",
						},
						"cloud_access_config": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: "Access port information.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"instance_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The ID of instance.",
									},
									"listener_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The ID of listener.",
									},
									"protocol": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The type of Listener protocol.",
									},
									"port": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The port number corresponding to the listener.",
									},
									"access_protocol": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The access protocol needs to be consistent with the monitoring protocol.",
									},
								},
							},
						},
						"public_real_server": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Connect to the source return mode.",
						},
						"vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The ID of vpc.",
						},
						"protocol_ports": {
							Type:        schema.TypeList,
							MaxItems:    1,
							Computed:    true,
							Description: "Access port information.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"http": {
										Type:     schema.TypeList,
										Computed: true,
										Elem: &schema.Schema{
											Type: schema.TypeInt,
										},
										Description: "Ports supported by the HTTP protocol.",
									},
									"https": {
										Type:     schema.TypeList,
										Computed: true,
										Elem: &schema.Schema{
											Type: schema.TypeInt,
										},
										Description: "Ports supported by the HTTPs protocol.",
									},
								},
							},
						},
						"enable_http2": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable HTTP 2.0.",
						},
						"enable_ipv6": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether it supports protecting IPv6 requests.",
						},
						"backend_groups": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: "The configuration of source station.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"access_port": {
										Type:     schema.TypeList,
										Computed: true,
										Elem: &schema.Schema{
											Type: schema.TypeInt,
										},
										Description: "Access port number.",
									},
									"backends": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: "The details of the source station group.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"protocol": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: "The agreement of Source Station.",
												},
												"ip": {
													Type:        schema.TypeString,
													Computed:    true,
													Description: "Source station IP address.",
												},
												"port": {
													Type:        schema.TypeInt,
													Computed:    true,
													Description: "Source station port number.",
												},
												"weight": {
													Type:        schema.TypeInt,
													Computed:    true,
													Description: "The weight of the source station rules.",
												},
											},
										},
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "Source station group name. Works only on modified scenes.",
									},
								},
							},
						},
						"protocol_follow": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable protocol following.",
						},
						"proxy_config": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable proxy configuration.",
						},
						"client_ip_location": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The method of obtaining the client IP.",
						},
						"custom_header": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: "Custom Header.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"tls_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable the log service.",
						},
						"ssl_protocols": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Description: "TLS protocol version.",
						},
						"ssl_ciphers": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Description: "Encryption kit.",
						},
						"client_max_body_size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The client requests the maximum value of body.",
						},
						"keep_alive_time_out": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Long connection retention time.",
						},
						"keep_alive_request": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The number of long connection multiplexes.",
						},
						"proxy_connect_time_out": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The timeout period for establishing a connection between the WAF and the backend server.",
						},
						"proxy_read_time_out": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The timeout period during which WAF reads the response from the backend server.",
						},
						"proxy_keep_alive_time_out": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Idle long connection timeout period.",
						},
						"proxy_retry": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The number of retries for WAF back to source.",
						},
						"proxy_write_time_out": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The timeout period during which the WAF transmits the request to the backend server.",
						},
						"proxy_keep_alive": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The number of reusable WAF origin long connections.",
						},
						"attack_status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The status of the attack.",
						},
						"defence_mode": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The protection mode of the instance.",
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The status of access.",
						},
						"waf_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the vulnerability protection strategy has been enabled.",
						},
						"cc_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the cc protection strategy has been enabled.",
						},
						"white_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the whitelist strategy has been enabled.",
						},
						"black_ip_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the blacklist strategy has been enabled.",
						},
						"black_lct_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the regional ban strategy has been activated.",
						},
						"waf_white_req_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable the whitening strategy for vulnerability protection requests.",
						},
						"white_field_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable the whitening strategy for vulnerability protection fields.",
						},
						"custom_rsp_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the custom response interception strategy has been enabled.",
						},
						"system_bot_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the managed Bot classification strategy has been enabled.",
						},
						"custom_bot_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the custom Bot classification strategy has been enabled.",
						},
						"dlp_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to activate the strategy for preventing the leakage of sensitive information.",
						},
						"api_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the API protection policy has been enabled.",
						},
						"tamper_proof_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable the page tamper proof policy.",
						},
						"auto_cc_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable the intelligent CC protection strategy.",
						},
						"src_ips": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "WAF source IP.",
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The update time.",
						},
						"server_ips": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The IP of the WAF protection instance.",
						},
						"protocols": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Access protocol types.",
						},
					},
				},
			},
		},
	}
}

func dataSourceVolcengineWafDomainsRead(d *schema.ResourceData, meta interface{}) error {
	service := NewWafDomainService(meta.(*ve.SdkClient))
	return service.Dispatcher.Data(service, d, DataSourceVolcengineWafDomains())
}
