package tos_bucket_inventory

import (
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	ve "github.com/volcengine/terraform-provider-volcengine/common"
)

/*

Import
TosBucketInventory can be imported using the bucket_name:inventory_id, e.g.
```
$ terraform import volcengine_tos_bucket_inventory.default resource_id
```

*/

func ResourceVolcengineTosBucketInventory() *schema.Resource {
	resource := &schema.Resource{
		Create: resourceVolcengineTosBucketInventoryCreate,
		Read:   resourceVolcengineTosBucketInventoryRead,
		Update: resourceVolcengineTosBucketInventoryUpdate,
		Delete: resourceVolcengineTosBucketInventoryDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(30 * time.Minute),
			Update: schema.DefaultTimeout(30 * time.Minute),
			Delete: schema.DefaultTimeout(30 * time.Minute),
		},
		Schema: map[string]*schema.Schema{
			"bucket_name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The name of the bucket.",
			},
			"inventory_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The name of the bucket inventory.",
			},
			"is_enabled": {
				Type:        schema.TypeBool,
				Required:    true,
				Description: "Whether to enable the bucket inventory.",
			},
			"included_object_versions": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The export version of object. Valid values: `All`, `Current`.",
			},
			"schedule": {
				Type:        schema.TypeList,
				Required:    true,
				MaxItems:    1,
				Description: "The export schedule of the bucket inventory.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"frequency": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The export schedule of the bucket inventory. Valid values: `Daily`, `Weekly`.",
						},
					},
				},
			},
			"filter": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "The filter of the bucket inventory.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"prefix": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.",
						},
					},
				},
			},
			"optional_fields": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "The information exported from the bucket inventory.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"field": {
							Type:     schema.TypeSet,
							Optional: true,
							Set:      schema.HashString,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Description: "The information exported from the bucket inventory. Valid values: `Size`, `LastModifiedDate`, `ETag`, `StorageClass`, `IsMultipartUploaded`, `EncryptionStatus`, `CRC64`, `ReplicationStatus`.",
						},
					},
				},
			},
			"destination": {
				Type:        schema.TypeList,
				Required:    true,
				MaxItems:    1,
				MinItems:    1,
				Description: "The destination information of the bucket inventory.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"tos_bucket_destination": {
							Type:        schema.TypeList,
							Required:    true,
							MaxItems:    1,
							MinItems:    1,
							Description: "The destination tos bucket information of the bucket inventory.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"bucket": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "The name of the destination tos bucket.",
									},
									"account_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "The account id of the destination tos bucket.",
									},
									"role": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "The role name used to grant TOS access to read all files from the source bucket and write files to the destination bucket. You can use the default TOS role `TosArchiveTOSInventory`.",
									},
									"format": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "The format of the bucket inventory. Valid values: `CSV`.",
									},
									"prefix": {
										Type:        schema.TypeString,
										Optional:    true,
										Computed:    true,
										Description: "The storage path prefix of the bucket inventory in destination tos bucket.",
									},
								},
							},
						},
					},
				},
			},
		},
	}
	return resource
}

func resourceVolcengineTosBucketInventoryCreate(d *schema.ResourceData, meta interface{}) (err error) {
	service := NewTosBucketInventoryService(meta.(*ve.SdkClient))
	err = service.Dispatcher.Create(service, d, ResourceVolcengineTosBucketInventory())
	if err != nil {
		return fmt.Errorf("error on creating tos_bucket_inventory %q, %s", d.Id(), err)
	}
	return resourceVolcengineTosBucketInventoryRead(d, meta)
}

func resourceVolcengineTosBucketInventoryRead(d *schema.ResourceData, meta interface{}) (err error) {
	service := NewTosBucketInventoryService(meta.(*ve.SdkClient))
	err = service.Dispatcher.Read(service, d, ResourceVolcengineTosBucketInventory())
	if err != nil {
		return fmt.Errorf("error on reading tos_bucket_inventory %q, %s", d.Id(), err)
	}
	return err
}

func resourceVolcengineTosBucketInventoryUpdate(d *schema.ResourceData, meta interface{}) (err error) {
	service := NewTosBucketInventoryService(meta.(*ve.SdkClient))
	err = service.Dispatcher.Update(service, d, ResourceVolcengineTosBucketInventory())
	if err != nil {
		return fmt.Errorf("error on updating tos_bucket_inventory %q, %s", d.Id(), err)
	}
	return resourceVolcengineTosBucketInventoryRead(d, meta)
}

func resourceVolcengineTosBucketInventoryDelete(d *schema.ResourceData, meta interface{}) (err error) {
	service := NewTosBucketInventoryService(meta.(*ve.SdkClient))
	err = service.Dispatcher.Delete(service, d, ResourceVolcengineTosBucketInventory())
	if err != nil {
		return fmt.Errorf("error on deleting tos_bucket_inventory %q, %s", d.Id(), err)
	}
	return err
}
